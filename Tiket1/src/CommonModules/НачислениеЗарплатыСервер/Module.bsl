#Область ПрограммныйИнтерфейс

// Производит расчет заработной платы
//
// Параметры:
// Регистратор - ДокументСсылка.НачислениеЗарплаты
// Движения - КоллекцияДвижений
// ОсновныеНачисления - ТабличнаяЧасть - см. Документ.НачислениеЗарплаты
// ДополнительныеНачисления - ТабличнаяЧасть - см. Документ.НачислениеЗарплаты
// ПериодРегистрации - Дата
//
Процедура РассчитатьНачисления(Регистратор, Движения, ОсновныеНачисления, ДополнительныеНачисления, ПериодРегистрации) Экспорт
	
	НаборЗаписей = Движения.ОсновныеНачисления;
	ПроизвестиРасчетОсновныхНачислений(Регистратор, НаборЗаписей, ОсновныеНачисления, ПериодРегистрации);
	НаборЗаписей.Записать(,Истина);
	
	НаборЗаписей = Движения.ДополнительныеНачисления;
	ПроизвестиРасчетДополнительныхНачислений(Регистратор, НаборЗаписей, ДополнительныеНачисления, ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет заработной платы
//
// Параметры:
// Регистратор - ДокументСсылка.НачислениеЗарплаты
// НаборЗаписей - КоллекцияДвижений
// ОсновныеНачисления - ТабличнаяЧасть - см. Документ.НачислениеЗарплаты
// ПериодРегистрации - Дата
//
Процедура ПроизвестиРасчетОсновныхНачислений(Регистратор, НаборЗаписей, ОсновныеНачисления, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияДанныеГрафика.НомерСтроки,
		|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.КоличествоДнейПериодДействия, 0) КАК ПлановоеЗначение,
		|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.КоличествоДнейФактическийПериодДействия, 0) КАК ФактическоеЗначение,
		|	ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_ДанныеГрафика
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(Регистратор = &Регистратор
		|	И ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисления.Оклад)) КАК ОсновныеНачисленияДанныеГрафика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеГрафика.НомерСтроки,
		|	ВТ_ДанныеГрафика.ФактическоеЗначение,
		|	ВТ_ДанныеГрафика.ПлановоеЗначение,
		|	ЕСТЬNULL(СведенияОСотрудникахСрезПоследних.Оклад, 0) КАК Оклад
		|ИЗ
		|	ВТ_ДанныеГрафика КАК ВТ_ДанныеГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСотрудниках.СрезПоследних(&ПериодРегистрации, Сотрудник В
		|			(ВЫБРАТЬ
		|				Т.Сотрудник
		|			ИЗ
		|				ВТ_ДанныеГрафика КАК Т)) КАК СведенияОСотрудникахСрезПоследних
		|		ПО ВТ_ДанныеГрафика.Сотрудник = СведенияОСотрудникахСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДанныеГрафика";
	
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураПоиска = Новый Структура("НомерСтроки", 0);
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		СтруктураПоиска.НомерСтроки = Запись.НомерСтроки;
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
		
			Запись.Результат = ?(Выборка.ПлановоеЗначение = 0, 0, Выборка.Оклад * Выборка.ФактическоеЗначение / Выборка.ПлановоеЗначение);
			ОсновныеНачисления[Запись.НомерСтроки - 1].Результат = Запись.Результат;
			ОсновныеНачисления[Запись.НомерСтроки - 1].Параметр = Выборка.Оклад;
				
		КонецЕсли;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

// Производит расчет заработной платы
//
// Параметры:
// Регистратор - ДокументСсылка.НачислениеЗарплаты
// НаборЗаписей - КоллекцияДвижений
// ДополнительныеНачисления - ТабличнаяЧасть - см. Документ.НачислениеЗарплаты
// ПериодРегистрации - Дата
//
Процедура ПроизвестиРасчетДополнительныхНачислений(Регистратор, НаборЗаписей, ДополнительныеНачисления, ПериодРегистрации)
	

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.НомерСтроки,
		|	ЕСТЬNULL(ПроцентыПремии.Процент, 0) КАК Процент,
		|	РАЗНОСТЬДАТ(ФизическиеЛица.ДатаПриема, &ПериодРегистрации, ГОД) КАК ТекущийСтаж,
		|	ЕСТЬNULL(ДополнительныеНачисленияБазаОсновныеНачисления.РезультатБаза, 0) КАК РезультатБаза
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисления КАК ДополнительныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисления.БазаОсновныеНачисления(&ИзмеренияРегистров,
		|			&ИзмеренияРегистров,, Регистратор = &Регистратор
		|		И ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисления.Премия)) КАК
		|			ДополнительныеНачисленияБазаОсновныеНачисления
		|		ПО ДополнительныеНачисления.НомерСтроки = ДополнительныеНачисленияБазаОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ДополнительныеНачисления.Сотрудник = ФизическиеЛица.Ссылка		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыПремии КАК ПроцентыПремии
		|		ПО РАЗНОСТЬДАТ(ФизическиеЛица.ДатаПриема, &ПериодРегистрации, Год) >= ПроцентыПремии.СтажОт
		|		И РАЗНОСТЬДАТ(ФизическиеЛица.ДатаПриема, &ПериодРегистрации, Год) <= ПроцентыПремии.СтажДо
		|		ИЛИ РАЗНОСТЬДАТ(ФизическиеЛица.ДатаПриема, &ПериодРегистрации, Год) >= ПроцентыПремии.СтажОт
		|		И ПроцентыПремии.СтажДо = 0
		|ГДЕ
		|	ДополнительныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисления.Премия)
		|	И ДополнительныеНачисления.Регистратор = &Регистратор";
	
	ИзмеренияРегистров = Новый Массив(1);
	ИзмеренияРегистров[0] = "Сотрудник";
	
	Запрос.УстановитьПараметр("ИзмеренияРегистров", ИзмеренияРегистров);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	СтруктураПоиска = Новый Структура("НомерСтроки", 0);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
	
		СтруктураПоиска.НомерСтроки = Запись.НомерСтроки;
		
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			
			ДополнительныеНачисления[Запись.НомерСтроки - 1].Результат = Выборка.РезультатБаза * Выборка.Процент / 100;
			ДополнительныеНачисления[Запись.НомерСтроки - 1].Параметр = Выборка.Процент;
			ДополнительныеНачисления[Запись.НомерСтроки - 1].Стаж = Выборка.ТекущийСтаж;
				
		КонецЕсли;
			
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
