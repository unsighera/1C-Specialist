#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТТовары(МенеджерТаблиц);
	
	ОбработкаПроведенияОУ(Отказ, МенеджерТаблиц);
	ОбработкаПроведенияБУ(Отказ, МенеджерТаблиц);
				
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область СлужебныеПроцедурыИФункции

// Обработка проведения по регистрам оперативного учета
// 
// Параметры:
// Отказ - Булево
// МенеджерТаблиц - МенедежрВременныхТаблиц
//
//@skip-check module-accessibility-at-client
//@skip-check doc-comment-type
//
Процедура ОбработкаПроведенияОУ(Отказ, МенеджерТаблиц)
	
	МетодСписания = РегистрыСведений.ИсторияУчетныхПолитик.ПолучитьПоследнее(Дата).МетодСписания;
	
	Если Не ЗначениеЗаполнено(МетодСписания) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо заполнить метод списания учетной политики!";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПорядокСортировкиПартий = ?(МетодСписания = Перечисления.МетодыСписания.LIFO, " УБЫВ", "");
	
	Движения.ОстаткиНоменклатуры.Очистить();
	Движения.ОстаткиНоменклатуры.Записывать = Истина;
	Движения.ОстаткиНоменклатуры.Записать();
		
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ ВТ_Товары");
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Движения.ОстаткиНоменклатуры.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ОстаткиНоменклатуры.ДобавитьРасход();
		Движение.Период = Дата;
		Движение.Склад = Склад;
		Движение.Номенклатура = Выборка.Номенклатура;
		Движение.Количество = Выборка.Количество;
		
	КонецЦикла;
	
	Движения.ОстаткиНоменклатуры.Записывать = Истина;
	Движения.ОстаткиНоменклатуры.Записать();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиНоменклатурыОстатки.Номенклатура) КАК Номенклатура,
		|	-ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК Дефицит
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(&МоментВремени, Склад = &Склад
		|	И Номенклатура В
		|		(ВЫБРАТЬ
		|			Товары.Номенклатура
		|		ИЗ
		|			ВТ_Товары КАК Товары)) КАК ОстаткиНоменклатурыОстатки
		|ГДЕ
		|	ОстаткиНоменклатурыОстатки.КоличествоОстаток < 0";
	ГраницаКонтроля = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("МоментВремени", ГраницаКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда

		Отказ = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		
		//@skip-check module-unused-local-variable
		ШаблонСтроки = "На складе %1 не хватает %2 в количестве %3.";
		
		Пока Выборка.Следующий() Цикл
			
			//@skip-check property-return-type
			ТекстСообщения = СтрШаблон(ШаблонСтроки, Склад, Выборка.Номенклатура, Выборка.Дефицит);
			
			Сообщение = Новый СообщениеПользователю;
			//@skip-check undefined-variable
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
		КонецЦикла;
		Возврат;
		
	КонецЕсли;
	
	Движения.ПартииНоменклатуры.Очистить();
	Движения.ПартииНоменклатуры.Записывать = Истина;
	Движения.ПартииНоменклатуры.Записать();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПартииНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Товары;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		Блокировка.Заблокировать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Количество КАК Количество,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Товары.Номенклатура) КАК ПредставлениеНоменклатуры,
		|	ПартииНоменклатурыОстатки.Партия КАК Партия,
		|	ЕСТЬNULL(ПартииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(ПартииНоменклатурыОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииНоменклатуры.Остатки(&МоментВремени, Номенклатура В
		|			(ВЫБРАТЬ
		|				ВТ_Товары.Номенклатура
		|			ИЗ
		|				ВТ_Товары КАК ВТ_Товары)) КАК ПартииНоменклатурыОстатки
		|		ПО ВТ_Товары.Номенклатура = ПартииНоменклатурыОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|		ПО ПартииНоменклатурыОстатки.Партия = ПриходнаяНакладная.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриходнаяНакладная.МоментВремени" + ПорядокСортировкиПартий + "
		|ИТОГИ
		|	МАКСИМУМ(Количество),
		|	СУММА(КоличествоОстаток)
		|ПО
		|	Номенклатура";
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ШаблонСтроки = "Превышение остатков номенклатуры %1 в количестве %2";
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Профицит = ВыборкаНоменклатура.Количество - ВыборкаНоменклатура.КоличествоОстаток;
		Если Профицит > 0 Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст	= СтрШаблон(ШаблонСтроки, ВыборкаНоменклатура.ПредставлениеНоменклатуры, Профицит);
			Сообщение.Сообщить();
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		ОсталосьСписать = ВыборкаНоменклатура.Количество;
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоСписание = Мин(ОсталосьСписать, Выборка.КоличествоОстаток);
			
			Если КоличествоСписание = Выборка.КоличествоОстаток Тогда
				Себестоимость = Выборка.СуммаОстаток;
			Иначе
				Себестоимость = КоличествоСписание / Выборка.КоличествоОстаток * Выборка.СуммаОстаток;
			КонецЕсли;
			
			Движение = Движения.ПартииНоменклатуры.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Партия = Выборка.Партия;
			Движение.Количество = КоличествоСписание;
			Движение.Сумма = Себестоимость;
			
			ОсталосьСписать = ОсталосьСписать - КоличествоСписание;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка проведения по регистрам бухгалтерского учета
//
// Параметры:
// Отказ - Булево
// МенеджерТаблиц - МенеджерВременныхТаблиц
//
//@skip-check module-accessibility-at-client
//@skip-check module-unused-method
Процедура ОбработкаПроведенияБУ(Отказ, МенеджерТаблиц)
	
	Движения.Управленческий.Очистить();
	Движения.Управленческий.Записывать = Истина;
	Движения.Управленческий.Записать();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
		ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.Товары);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Товары;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура, "Номенклатура");
		Блокировка.Заблокировать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Товары.Номенклатура) КАК НоменклатураПредставление,
		|	ВТ_Товары.Количество КАК КоличествоВДокументе,
		|	УправленческийОстаткиПоНоменклатуреИСрокам.Субконто2 КАК СрокГодности,
		|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(УправленческийОстаткиПоНоменклатуреИСрокам.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
		|			&МоментВремени,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Товары),
		|			&СубконтоНоменклатура, 
		|			Субконто1 В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура
		|				ИЗ
		|					ВТ_Товары КАК Т)) КАК УправленческийОстатки
		|		ПО ВТ_Товары.Номенклатура = УправленческийОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
		|				&МоментВремени,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Товары),
		|				&СубконтоНоменклатураСрок,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						Т.Номенклатура
		|					ИЗ
		|						ВТ_Товары КАК Т)) КАК УправленческийОстаткиПоНоменклатуреИСрокам
		|		ПО ВТ_Товары.Номенклатура = УправленческийОстаткиПоНоменклатуреИСрокам.Субконто1
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокГодности
		|ИТОГИ
		|	МАКСИМУМ(КоличествоВДокументе),
		|	МАКСИМУМ(СуммаОстаток),
		|	СУММА(КоличествоОстаток)
		|ПО
		|	Номенклатура";
	
	ГраницаКонтроля = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	
	СубконтоНоменклатура = Новый Массив(1);
	СубконтоНоменклатура[0] = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
	
	СубконтоНоменклатураСрок = Новый Массив(2);
	СубконтоНоменклатураСрок[0] = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
	СубконтоНоменклатураСрок[1] = ПланыВидовХарактеристик.ВидыСубконто.СрокГодностиТовара;
	
	Запрос.УстановитьПараметр("СубконтоНоменклатура", СубконтоНоменклатура);
	Запрос.УстановитьПараметр("СубконтоНоменклатураСрок", СубконтоНоменклатураСрок);
	Запрос.УстановитьПараметр("МоментВремени", ГраницаКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ШаблонСообщения = НСтр("ru = 'Превышение остатка по номенклатуре %1 в количестве %2'");
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПревышениеЛимита = ВыборкаНоменклатура.КоличествоВДокументе - ВыборкаНоменклатура.КоличествоОстаток;
		Если ПревышениеЛимита > 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ШаблонСообщения, ВыборкаНоменклатура.НоменклатураПредставление, ПревышениеЛимита);
			Сообщение.Сообщить();
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
	
		Выборка = ВыборкаНоменклатура.Выбрать();
	
		ОсталосьСписать = ВыборкаНоменклатура.КоличествоВДокументе;
		СуммаПоНоменклатуре = ВыборкаНоменклатура.СуммаОстаток;
		КоличествоПоНоменклатуре = ВыборкаНоменклатура.КоличествоОстаток;
		
		СуммовойОстатокПоНоменклатуре = ВыборкаНоменклатура.СуммаОстаток;
		КоличественныйОстатокПоНоменклатуре = ВыборкаНоменклатура.КоличествоОстаток;
		
		Пока Выборка.Следующий() И ОсталосьСписать <> 0 Цикл
			
			КоличествоСписываем = Мин(Выборка.КоличествоОстаток, ОсталосьСписать);
			Если КоличествоСписываем = КоличественныйОстатокПоНоменклатуре Тогда
				Себестоимость = СуммовойОстатокПоНоменклатуре;	
			Иначе
				Себестоимость = КоличествоСписываем / КоличествоПоНоменклатуре * СуммаПоНоменклатуре;	
			КонецЕсли;
			
			Движение = Движения.Управленческий.Добавить();
			Движение.Период = Дата;
			Движение.СчетДт = ПланыСчетов.Управленческий.ПрибылиИУбытки;
			Движение.СчетКт = ПланыСчетов.Управленческий.Товары;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СрокГодностиТовара] = Выборка.СрокГодности;
			//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
			Движение.КоличествоКт = КоличествоСписываем;
			Движение.Сумма = Себестоимость;
			
			КоличественныйОстатокПоНоменклатуре = КоличественныйОстатокПоНоменклатуре - КоличествоСписываем;
			СуммовойОстатокПоНоменклатуре = СуммовойОстатокПоНоменклатуре - Себестоимость;
			
			ОсталосьСписать = ОсталосьСписать - КоличествоСписываем;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движение = Движения.Управленческий.Добавить();
	Движение.Период = Дата;
	Движение.СчетДт = ПланыСчетов.Управленческий.Покупатели;
	Движение.СчетКт = ПланыСчетов.Управленческий.ПрибылиИУбытки;
	Движение.Сумма = СуммаДокумента;
	
	Движения.Управленческий.Записывать = Истина;
	
КонецПроцедуры

// Формирование ВТ с товарами документа
//
// Параметры:
// МенеджерТаблиц - МенеджерВременныхТаблиц
//
//@skip-check module-accessibility-at-client
Процедура СоздатьВТТовары(МенеджерТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РасходнаяНакладнаяТовары.Количество) КАК Количество,
		|	СправочникНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.РасходнаяНакладная.Товары КАК РасходнаяНакладнаяТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО РасходнаяНакладнаяТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоУслуга
		|	И РасходнаяНакладнаяТовары.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	СправочникНоменклатура.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти
