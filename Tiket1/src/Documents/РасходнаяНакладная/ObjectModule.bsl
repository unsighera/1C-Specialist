#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	МетодСписания = РегистрыСведений.ИсторияУчетныхПолитик.ПолучитьПоследнее(Дата).МетодСписания;
	
	Если Не ЗначениеЗаполнено(МетодСписания) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо заполнить метод списания учетной политики!";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПорядокСортировкиПартий = ?(МетодСписания = Перечисления.МетодыСписания.LIFO, " УБЫВ", "");
	
	Движения.ОстаткиНоменклатуры.Очистить();
	Движения.ОстаткиНоменклатуры.Записывать = Истина;
	Движения.ОстаткиНоменклатуры.Записать();
		
	Запрос = Новый Запрос;
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(РасходнаяНакладнаяТовары.Количество) КАК Количество,
		|	СправочникНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.РасходнаяНакладная.Товары КАК РасходнаяНакладнаяТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО РасходнаяНакладнаяТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоУслуга
		|	И РасходнаяНакладнаяТовары.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	СправочникНоменклатура.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ * ИЗ ВТ_Товары";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Движения.ОстаткиНоменклатуры.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ОстаткиНоменклатуры.ДобавитьРасход();
		Движение.Период = Дата;
		Движение.Склад = Склад;
		Движение.Номенклатура = Выборка.Номенклатура;
		Движение.Количество = Выборка.Количество;
		
	КонецЦикла;
	
	Движения.ОстаткиНоменклатуры.Записывать = Истина;
	Движения.ОстаткиНоменклатуры.Записать();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиНоменклатурыОстатки.Номенклатура) КАК Номенклатура,
		|	-ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК Дефицит
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(&МоментВремени, Склад = &Склад
		|	И Номенклатура В
		|		(ВЫБРАТЬ
		|			Товары.Номенклатура
		|		ИЗ
		|			ВТ_Товары КАК Товары)) КАК ОстаткиНоменклатурыОстатки
		|ГДЕ
		|	ОстаткиНоменклатурыОстатки.КоличествоОстаток < 0";
	ГраницаКонтроля = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("МоментВремени", ГраницаКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда

		Отказ = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		
		//@skip-check module-unused-local-variable
		ШаблонСтроки = "На складе %1 не хватает %2 в количестве %3.";
		
		Пока Выборка.Следующий() Цикл
			
			//@skip-check property-return-type
			ТекстСообщения = СтрШаблон(ШаблонСтроки, Склад, Выборка.Номенклатура, Выборка.Дефицит);
			
			Сообщение = Новый СообщениеПользователю;
			//@skip-check undefined-variable
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
		КонецЦикла;
		Возврат;
		
	КонецЕсли;
	
	Движения.ПартииНоменклатуры.Очистить();
	Движения.ПартииНоменклатуры.Записывать = Истина;
	Движения.ПартииНоменклатуры.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПартииНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Количество КАК Количество,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Товары.Номенклатура) КАК ПредставлениеНоменклатуры,
		|	ПартииНоменклатурыОстатки.Партия КАК Партия,
		|	ЕСТЬNULL(ПартииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(ПартииНоменклатурыОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииНоменклатуры.Остатки(&МоментВремени, Номенклатура В
		|			(ВЫБРАТЬ
		|				ВТ_Товары.Номенклатура
		|			ИЗ
		|				ВТ_Товары КАК ВТ_Товары)) КАК ПартииНоменклатурыОстатки
		|		ПО ВТ_Товары.Номенклатура = ПартииНоменклатурыОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|		ПО ПартииНоменклатурыОстатки.Партия = ПриходнаяНакладная.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриходнаяНакладная.МоментВремени" + ПорядокСортировкиПартий + "
		|ИТОГИ
		|	МАКСИМУМ(Количество),
		|	СУММА(КоличествоОстаток)
		|ПО
		|	Номенклатура";
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ШаблонСтроки = "Превышение остатков номенклатуры %1 в количестве %2";
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Профицит = ВыборкаНоменклатура.Количество - ВыборкаНоменклатура.КоличествоОстаток;
		Если Профицит > 0 Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст	= СтрШаблон(ШаблонСтроки, ВыборкаНоменклатура.ПредставлениеНоменклатуры, Профицит);
			Сообщение.Сообщить();
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		ОсталосьСписать = ВыборкаНоменклатура.Количество;
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоСписание = Мин(ОсталосьСписать, Выборка.КоличествоОстаток);
			
			Если КоличествоСписание = Выборка.КоличествоОстаток Тогда
				Себестоимость = Выборка.СуммаОстаток;
			Иначе
				Себестоимость = КоличествоСписание / Выборка.КоличествоОстаток * Выборка.СуммаОстаток;
			КонецЕсли;
			
			Движение = Движения.ПартииНоменклатуры.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Партия = Выборка.Партия;
			Движение.Количество = КоличествоСписание;
			Движение.Сумма = Себестоимость;
			
			ОсталосьСписать = ОсталосьСписать - КоличествоСписание;
				
		КонецЦикла;
		
	КонецЦикла;
				
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
